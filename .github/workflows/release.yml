name: Create Release

on:
  workflow_run:
    workflows: ["build"]
    types: [completed]

permissions:
  contents: write

jobs:
  release:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout repo
      uses: actions/checkout@v4

    - name: üîç Extract CURRENT_VERSION
      id: extract
      run: |
        VERSION=$(grep -oP 'CURRENT_VERSION\s*=\s*"\K[^"]+' src/bot/main.py)
        echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

    # ------------------------------------------------------------
    # Download artifacts for this run with the GitHub REST API
    # ------------------------------------------------------------
    - name: üîΩ Fetch artifact list & download
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        RUN_ID=${{ github.event.workflow_run.id }}
        API="https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts"
        mkdir artifacts

        curl -sSL -H "Authorization: token $GH_TOKEN" "$API" | \
          jq -r '.artifacts[] | select(.name|startswith("binaries-")) | [.name,.archive_download_url] | @tsv' |
        while IFS=$'\t' read -r NAME URL; do
          echo "‚è¨  $NAME"
          curl -sSL -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github+json" \
               "$URL" -o "$NAME.zip"
          unzip -q "$NAME.zip" -d "artifacts/$NAME"
        done

        echo "Downloaded structure:"
        find artifacts -maxdepth 2 -type f

    # ------------------------------------------------------------
    # Re-package per OS
    # ------------------------------------------------------------
    - name: üì¶ Zip watcher+updater for each OS
      run: |
        set -e
        mkdir -p release_zips

        # Windows
        cp artifacts/binaries-windows-latest/main.exe    watcher.exe
        cp artifacts/binaries-windows-latest/updater.exe updater.exe
        zip -qj release_zips/atsuko-nexus-windows-x64.zip watcher.exe updater.exe

        # Linux
        cp artifacts/binaries-ubuntu-latest/main    watcher
        cp artifacts/binaries-ubuntu-latest/updater updater
        chmod +x watcher updater
        zip -qj release_zips/atsuko-nexus-linux-x64.zip watcher updater

        # macOS
        cp artifacts/binaries-macos-latest/main    watcher
        cp artifacts/binaries-macos-latest/updater updater
        chmod +x watcher updater
        zip -qj release_zips/atsuko-nexus-macos-x64.zip watcher updater

    - name: üîñ Generate changelog from last tag
      id: changelog
      run: |
        set -e
        git fetch --tags

        # Get last tag not equal to current version
        LATEST_TAG=$(git tag --sort=-creatordate | grep -v "${VERSION}" | head -n1 || echo "")
        echo "Last tag: $LATEST_TAG"

        LOG_RANGE=""
        if [ -n "$LATEST_TAG" ]; then
          LOG_RANGE="$LATEST_TAG..HEAD"
        fi

        get_commits() {
          PREFIX=$1
          git log $LOG_RANGE --pretty=format:"- %s (%h)" | \
            grep -Ei "^\[$PREFIX\]" | sed -E "s/^\[$PREFIX\] //I" || echo "N/A"
        }

        ADDED=$(get_commits "ADD")
        REMOVED=$(get_commits "REMOVE")
        FIXED=$(get_commits "FIX")

        {
          echo "## Changes in $VERSION"
          echo ""
          echo "**Added:**"
          echo "$ADDED"
          echo ""
          echo "**Removed:**"
          echo "$REMOVED"
          echo ""
          echo "**Fixed:**"
          echo "$FIXED"
        } > release_notes.md

        cat release_notes.md

    # ------------------------------------------------------------
    # Create or update release
    # ------------------------------------------------------------
    - name: üöÄ Create / update GitHub release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        TAG="$VERSION"
        TITLE="Atsuko Nexus $VERSION"

        if gh release view "$TAG" &>/dev/null; then
          echo "‚ÑπÔ∏è  Release $TAG exists ‚Äì will upload missing assets."
          EXISTING_ASSETS=$(gh release view "$TAG" --json assets -q '.assets[].name')
          for ZIP in release_zips/*; do
            NAME=$(basename "$ZIP")
            if echo "$EXISTING_ASSETS" | grep -qx "$NAME"; then
              echo "‚úîÔ∏è  Asset $NAME already present."
            else
              echo "‚ûï Uploading $NAME"
              gh release upload "$TAG" "$ZIP" --clobber
            fi
          done
        else
          echo "üÜï Creating release $TAG"
          gh release create "$TAG" release_zips/* \
            --title "$TITLE" \
            --notes-file release_notes.md
        fi