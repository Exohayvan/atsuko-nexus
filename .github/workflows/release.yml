name: Create Release

on:
  workflow_run:
    workflows: ["Build"]
    types: [completed]

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  release:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout repository
      uses: actions/checkout@v4

    - name: üîç Extract VERSION from Go source
      id: extract
      run: |
        VERSION=$(grep -oP 'Current\s*=\s*"\K[^"]+' src/version/version.go)
        echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

    - name: üîΩ Download latest Build artifacts
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RUN_ID=$(gh run list \
          --workflow="Build" \
          --branch="main" \
          --event=push \
          --json databaseId,status,conclusion \
          --limit 10 \
          -q '[.[] | select(.status=="completed" and .conclusion=="success")][0].databaseId')

        if [ -z "$RUN_ID" ]; then
          echo "‚ùå Could not find a successful Build run on 'main'"
          exit 1
        fi

        echo "‚úÖ Found successful run ID: $RUN_ID"
        gh run download "$RUN_ID" --dir artifacts

    - name: üì¶ Compress each artifact into separate .zip files
      run: |
        for file in artifacts/*; do
          [ -f "$file" ] || continue
          base_name=$(basename "$file")
          echo "Compressing $base_name"
          zip -j "artifacts/${base_name%.*}.zip" "$file"
          rm -f "$file"
        done

    - name: üîñ Generate changelog from last tag
      id: changelog
      run: |
        git fetch --tags --unshallow || true
        git fetch origin main

        LAST_TAG=$(git tag --sort=-creatordate | grep -v "^${VERSION}$" | head -n1 || true)
        RANGE=""
        [ -n "$LAST_TAG" ] && RANGE="$LAST_TAG..HEAD"

        get_list () {
          KEY="$1"
          git log $RANGE --no-merges --pretty=format:"- %s (%h)" \
            --grep="^\[${KEY}\]" --regexp-ignore-case | \
            sed -E "s/^- \[${KEY}\] /- /I" || true
        }

        ADDED=$(get_list "ADD")
        REMOVED=$(get_list "REMOVE")
        FIXED=$(get_list "FIX")

        [[ -z "$ADDED"   ]] && ADDED="N/A"
        [[ -z "$REMOVED" ]] && REMOVED="N/A"
        [[ -z "$FIXED"   ]] && FIXED="N/A"

        {
          echo "## Changes in ${VERSION}"
          echo
          echo "**Added:**"
          echo "$ADDED"
          echo
          echo "**Removed:**"
          echo "$REMOVED"
          echo
          echo "**Fixed:**"
          echo "$FIXED"
        } > release_notes.md

    - name: üöÄ Create or update GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        TAG="$VERSION"
        TITLE="Atsuko Nexus $VERSION"
        FILES=$(find artifacts -name "*.zip")

        if gh release view "$TAG" &>/dev/null; then
          echo "‚ÑπÔ∏è  Release $TAG exists ‚Äì checking for missing artifacts..."
          EXISTING_ASSETS=$(gh release view "$TAG" --json assets -q '.assets[].name')
          for FILE in $FILES; do
            NAME=$(basename "$FILE")
            if echo "$EXISTING_ASSETS" | grep -qx "$NAME"; then
              echo "‚úîÔ∏è  $NAME already uploaded"
            else
              echo "‚ûï Uploading $NAME"
              gh release upload "$TAG" "$FILE" --clobber
            fi
          done
        else
          echo "üÜï Creating release $TAG"
          gh release create "$TAG" $FILES \
            --title "$TITLE" \
            --notes-file release_notes.md
        fi
