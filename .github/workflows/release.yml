name: Create Release From Build Artifacts

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      exists: ${{ steps.check.outputs.exists }}
    steps:
    - name: 🧾 Checkout repo
      uses: actions/checkout@v3

    - name: 🔍 Extract CURRENT_VERSION
      id: extract
      run: |
        VERSION=$(grep -oP 'CURRENT_VERSION\s*=\s*"\K[^"]+' src/bot/main.py)
        echo "Detected version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 🚦 Check if release already exists
      id: check
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TAG=${{ steps.extract.outputs.version }}
        if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" &>/dev/null; then
          echo "exists=true"  >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

  create:
    needs: prepare
    if: needs.prepare.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: binaries-*
        path: artifacts

    - name: 🗃️ Rename artifacts for release
      run: |
        mkdir -p release_assets

        # Linux
        mv artifacts/binaries-ubuntu-latest/watch*  release_assets/watcher-linux || true
        mv artifacts/binaries-ubuntu-latest/update* release_assets/updater-linux || true
        chmod +x release_assets/watcher-linux release_assets/updater-linux || true

        # macOS
        mv artifacts/binaries-macos-latest/watch*  release_assets/watcher-macos || true
        mv artifacts/binaries-macos-latest/update* release_assets/updater-macos || true
        chmod +x release_assets/watcher-macos release_assets/updater-macos || true

        # Windows
        mv artifacts/binaries-windows-latest/watch*.exe  release_assets/watcher-windows.exe || true
        mv artifacts/binaries-windows-latest/update*.exe release_assets/updater-windows.exe || true

        ls -lh release_assets

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.prepare.outputs.version }}
        name: "Atsuko Nexus ${{ needs.prepare.outputs.version }}"
        body: |
          Automated release for Atsuko Nexus version ${{ needs.prepare.outputs.version }}.
        files: |
          release_assets/*

  skip:
    needs: prepare
    if: needs.prepare.outputs.exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo "⚠️ Release ${{ needs.prepare.outputs.version }} already exists — skipping."